PARSER_BEGIN(Lugosi)
import java.io.*;
public class Lugosi {

  public static void main(String args[]) throws ParseException,IOException {
    
 Lugosi analisador = new Lugosi(new FileInputStream(args[0]));
 analisador.Lugosi();
  }

}

PARSER_END(Lugosi)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <MAIN: "main">
| <ACHAVES: "{">
| <FCHAVES: "}">
| <VAR: "var">
| <PONTOEVIRGULA: ";">
| <INT: "int">
| <BOOL: "bool">
| <FLOAT: "float">
| <VOID: "void">
| <DOISPONTOSIGUAL: ":=">
| <APARENTESES: "(">
| <FPARENTESES: ")">
| <IF: "if">
| <WHILE: "while">
| <DO: "do">
| <RETURN: "return">
| <PRINT: "print">
| <TRUE: "true">
| <FALSE: "false">
| <SUM: "+">
| <SUB: "-">
| <MULT: "*">
| <DIV: "/">
| <AND: "&&">
| <OR: "||">
| <MENOR: "<">
| <MAIOR: ">">
| <IGUAL: "==">
| <VIRGULA: ",">
| <FUNCAO: "function">
}

TOKEN :
{
  <NUM: (["-"])? (["0"-"9"])+ (["."](["0"-"9"])+)? (["e","E"] ((["-"])? (["0"-"9"])+))?>
| <ID: (["a"-"z","A"-"Z"])+ ((["a"-"z","A"-"Z","0"-"9", "_"])* (["a"-"z","A"-"Z","0"-"9"])+)*>
}

// LUGOSI -> MAIN FUNC?

void Lugosi() : 
{}
{

  Main() (Funcao())?

}

// MAIN -> <MAIN> <ACHAVES> VARDECL COMANDOS <FCHAVES> <EOF>

void Main () : 
{}
{

<MAIN> <ACHAVES> VarDecl() SeqComandos() <FCHAVES>
<EOF> 

}

// VARDECL -> VARDECL <VAR> TIPO <ID> <PONTOEVIRGULA> | EPSILON

void VarDecl() :
{}
{

  (<VAR> Tipo() <ID> <PONTOEVIRGULA>)*

}

// TIPO -> <INT> | <BOOL> | <FLOAT> | <VOID>

void Tipo() :
{}
{

  (<INT> | <BOOL> | <FLOAT> | <VOID>)

}

// SEQCOMANDOS -> SEQCOMANDOS COMANDO | vazio

void SeqComandos() :
{}
{
  
  (Comando())*
  
}

// COMANDO -> TOKEN_id ":=" EXP ";"
// | TOKEN_id "(" LISTAEXP? ")" ";"
// | "if" "(" EXP ")" "{" SEQCOMANDOS "}" ";"
// | "while" "(" EXP ")" "do" "{" SEQCOMANDOS "}" ";"
// | "do" "{" SEQCOMANDOS "}" "while" "(" EXP ")" ";"
// | "return" EXP ";"
// | "print" "(" EXP ")" ";"

void Comando() :
{}
{

  (IdL() | If() | While() | Do() | Return() | Print())
  
}

// Remoção do conflito de precedência na regra COMANDO -> TOKEN_id ":=" EXP ";" | TOKEN_id "(" LISTAEXP? ")" ";"

void IdL() :
{}
{

  (<ID> (Atribuicao() | ChamadaFuncao()))

}

// EXP -> "(" EXP OP EXP ")" | FATOR

void Expressao() :
{}
{

  ((<APARENTESES> Expressao() Operando() Expressao() <FPARENTESES>) | Fator())

}

// FATOR -> TOKEN_id | TOKEN_id "(" LISTAEXP? ")"
// | TOKEN_numliteral | "true" | "false"

void Fator() :
{}
{

  (<NUM> | <TRUE> | <FALSE> | <ID> (FatorL())?)

}

// Remoção do conflito de precedência na regra FATOR -> TOKEN_id | TOKEN_id "(" LISTAEXP? ")"

void FatorL() :
{}
{

  <APARENTESES> (ListaExp())? <FPARENTESES>

}

// OP -> "+" | "-" | "*" | "/" | "&&" | "||" | "<" | ">" | "=="

void Operando() :
{}
{

  (<SUM> | <SUB> | <MULT> | <DIV> | <AND> | <OR> | <MENOR> | <MAIOR> | <IGUAL>)

}

// LISTAEXP -> EXP | LISTAEXP "," EXP

void ListaExp() :
{}
{

  (Expressao() (<VIRGULA> Expressao())*)

}

// FUNC -> FUNC "function" TIPO TOKEN_id "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}"
// | "function" TIPO TOKEN_id "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}"

void Funcao() :
{}
{

  (<FUNCAO> Tipo() <ID> <APARENTESES> (ListaArg())? <FPARENTESES> <ACHAVES> VarDecl() SeqComandos() <FCHAVES>)+

}

// LISTAARG -> TIPO TOKEN_id | LISTAARG "," TIPO TOKEN_id

void ListaArg() :
{}
{

  (Tipo() <ID> (<VIRGULA> Tipo() <ID>)*)

}

// Definição das regras para os comandos atribuição, if, while, do, return e print

void Atribuicao() :
{}
{

  <DOISPONTOSIGUAL> Expressao() <PONTOEVIRGULA>

}


void If() :
{}
{
  
  <IF> <APARENTESES> Expressao() <FPARENTESES> <ACHAVES> SeqComandos() <FCHAVES> <PONTOEVIRGULA>
  
}

void While() :
{}
{
  
  <WHILE> <APARENTESES> Expressao() <FPARENTESES> <DO> <ACHAVES> SeqComandos() <FCHAVES> <PONTOEVIRGULA>
  
}

void Do() :
{}
{
  
  <DO> <ACHAVES> SeqComandos() <FCHAVES> <WHILE> <APARENTESES> Expressao() <FPARENTESES> <PONTOEVIRGULA>
  
}

void Return() :
{}
{
  
  <RETURN> Expressao() <PONTOEVIRGULA>
  
}

void Print() :
{}
{
  
  <PRINT> <APARENTESES> Expressao() <FPARENTESES> <PONTOEVIRGULA>
  
} 

// Chamada de função :: TOKEN_id "(" LISTAEXP? ")" ";"

void ChamadaFuncao() :
{}
{

  <APARENTESES> (ListaExp())? <FPARENTESES> <PONTOEVIRGULA>

}
